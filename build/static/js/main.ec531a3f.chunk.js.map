{"version":3,"sources":["components/project/ProjectDropDown.js","components/json/fileData.js","components/json/config.js","components/configuration/configEditPage.js","components/json/emailAliases.js","components/configuration/emailAliasePage.js","components/json/processStatus.js","components/configuration/processStatusEditPage.js","components/configuration/ConfigurationPage.js","components/common/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["options","defaultOption","files","React","Component","id","fileName","configData","repospath","sonarCommand","sonarCommandWithoutType","cleanuprepos","ciceroServerHost","ciceroServerPort","anamolyLOCCount","anamolyLOCCountPerCommit","exCludeFiles","projectName","ConfigEditPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","configArr","backState","globalArr","config","map","ele","push","key","value","setState","stateCopy","assign","arr","_this2","react_default","a","createElement","type","name","readOnly","onBlur","event","keys","forEach","element","target","console","log","dataToRender","_this3","x","common_Header","createRow","onClick","handleSubmit","handleBackButton","email","alias","EmailAliasesPage","address","typed","readFile","fs","handleClick","_this4","defaultValue","bind","ReactDOM","render","document","getElementById","y","className","processStatus","checkEnvironment","main","mainGitAnalysis","prepareConfigurationList","mainCiceroAnalysis","mainSonarAnalysis","sonarAnalysis","productivityjob","sonarETL","analytics","prepareMainStatus","combineCeicroModelsOfall","ProcessStatusEditPage","statusArr","data","ConfigurationPage","files1","onclickHandle","configEditPage","emailAliasePage","processStatusEditPage","createFileRow","Header","project","configuration_ConfigurationPage","App","dist_default","placeholder","onChange","e","handleProjectChange","Boolean","window","location","hostname","match","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec531a3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Dropdown from 'react-dropdown'\r\nimport 'react-dropdown/style.css'\r\nconst options = [\r\n    '5c', 'mist', 'vulcan'\r\n]\r\nconst defaultOption = options[0]\r\n\r\nclass AboutPage extends React.Component {        \r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron\">\r\n                <h6>Select Project:</h6>\r\n                <Dropdown options={options} value={defaultOption} placeholder=\"Select an option\" />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutPage;","export var files = [\r\n    {\r\n        id: 1,\r\n        fileName: 'config.json'\r\n    },\r\n    {\r\n        id: 2,\r\n        fileName: 'repoType.json'\r\n    },\r\n    {\r\n        id: 3,\r\n        fileName: 'git-log-anamoly.json'\r\n    },\r\n    {\r\n        id: 4,\r\n        fileName: 'processStatus.json'\r\n    },\r\n    {\r\n        id: 5,\r\n        fileName: 'emailAliases.json'\r\n    },\r\n];\r\n ","\r\n\r\nexport let vulcan = {\r\n    \"repospath\": \"repos\",\r\n    \"sonarCommand\": \"\\\"../../sonar-scanner/bin/sonar-scanner.bat\\\" -Dsonar.host.url=http://172.19.101.120:9393 -Dsonar.login=2dcd3909dd3091d5b81cf5fbe1eede589bf8f221 -Dsonar.java.binaries=../../sonar-scanner/lib/ -Dsonar.projectName=$reponame -Dsonar.projectKey=$reponame -Dsonar.sources=./ -Dsonar.language=$repotype\",\r\n    \"sonarCommandWithoutType\": \"\\\"../../sonar-scanner/bin/sonar-scanner\\\" -Dsonar.host.url=http://172.19.101.120:9393 -Dsonar.login=2dcd3909dd3091d5b81cf5fbe1eede589bf8f221 -Dsonar.java.binaries=../../sonar-scanner/lib/ -Dsonar.projectName=$reponame -Dsonar.projectKey=$reponame -Dsonar.sources=./ \",\r\n    \"cleanuprepos\": \"Drones-SW-DartService,Drones-SW-DartService\",\r\n    \"ciceroServerHost\": \"172.19.101.120\",\r\n    \"ciceroServerPort\": \"9393\",\r\n    \"anamolyLOCCount\": 1000,\r\n    \"anamolyLOCCountPerCommit\": 5000,\r\n    \"exCludeFiles\": [\"package-lock.json\"],\r\n    \"projectName\": \"vulcan\"\r\n};\r\nexport let c5 = {\r\n    \"repospath\": \"repos\",\r\n    \"sonarCommand\": \"\\\"../../sonar-scanner/bin/sonar-scanner.bat\\\" -Dsonar.host.url=http://172.19.101.120:9393 -Dsonar.login=2dcd3909dd3091d5b81cf5fbe1eede589bf8f221 -Dsonar.java.binaries=../../sonar-scanner/lib/ -Dsonar.projectName=$reponame -Dsonar.projectKey=$reponame -Dsonar.sources=./ -Dsonar.language=$repotype\",\r\n    \"sonarCommandWithoutType\": \"\\\"../../sonar-scanner/bin/sonar-scanner\\\" -Dsonar.host.url=http://172.19.101.120:9393 -Dsonar.login=2dcd3909dd3091d5b81cf5fbe1eede589bf8f221 -Dsonar.java.binaries=../../sonar-scanner/lib/ -Dsonar.projectName=$reponame -Dsonar.projectKey=$reponame -Dsonar.sources=./ \",\r\n    \"cleanuprepos\": \"Drones-SW-DartService,Drones-SW-DartService\",\r\n    \"ciceroServerHost\": \"172.19.101.120\",\r\n    \"ciceroServerPort\": \"9393\",\r\n    \"anamolyLOCCount\": 1000,\r\n    \"anamolyLOCCountPerCommit\": 5000,\r\n    \"exCludeFiles\": [\"package-lock.json\"],\r\n    \"projectName\": \"vulcan\"\r\n};\r\nexport let configData = [\r\n    vulcan={\r\n    \"repospath\": \"repos\",\r\n    \"sonarCommand\": \"\\\"../../sonar-scanner/bin/sonar-scanner.bat\\\" -Dsonar.host.url=http://172.19.101.120:9393 -Dsonar.login=2dcd3909dd3091d5b81cf5fbe1eede589bf8f221 -Dsonar.java.binaries=../../sonar-scanner/lib/ -Dsonar.projectName=$reponame -Dsonar.projectKey=$reponame -Dsonar.sources=./ -Dsonar.language=$repotype\",\r\n    \"sonarCommandWithoutType\": \"\\\"../../sonar-scanner/bin/sonar-scanner\\\" -Dsonar.host.url=http://172.19.101.120:9393 -Dsonar.login=2dcd3909dd3091d5b81cf5fbe1eede589bf8f221 -Dsonar.java.binaries=../../sonar-scanner/lib/ -Dsonar.projectName=$reponame -Dsonar.projectKey=$reponame -Dsonar.sources=./ \",\r\n    \"cleanuprepos\": \"Drones-SW-DartService,Drones-SW-DartService\",\r\n    \"ciceroServerHost\": \"172.19.101.120\",\r\n    \"ciceroServerPort\": \"9393\",\r\n    \"anamolyLOCCount\": 1000,\r\n    \"anamolyLOCCountPerCommit\": 5000,\r\n    \"exCludeFiles\": [\"package-lock.json\"],\r\n    \"projectName\": \"vulcan\"\r\n},\r\nc5 = {\r\n    \"projectName\": \"5c\",\r\n    \"anamolyLOCCountPerCommit\": 5000,\r\n    \"anamolyLOCCount\": 1000,\r\n    \"ciceroServerHost\": \"172.19.101.120\",\r\n    \"ciceroServerPort\": 9393,\r\n    \"cleanuprepos\": \"\",\r\n    \"repospath\": \"repos\",\r\n    \"sonarCommand\": \"\\\"../../sonar-scanner/bin/sonar-scanner.bat\\\" -Dsonar.host.url=http://172.19.101.120:9393 -Dsonar.login=2dcd3909dd3091d5b81cf5fbe1eede589bf8f221 -Dsonar.java.binaries=../../sonar-scanner/lib/ -Dsonar.projectName=$reponame -Dsonar.projectKey=$reponame -Dsonar.sources=./ -Dsonar.language=$repotype\", \"sonarCommandWithoutType\": \"\\\"../../sonar-scanner/bin/sonar-scanner\\\" -Dsonar.host.url=http://172.19.101.120:9393 -Dsonar.login=2dcd3909dd3091d5b81cf5fbe1eede589bf8f221 -Dsonar.java.binaries=../../sonar-scanner/lib/ -Dsonar.projectName=$reponame -Dsonar.projectKey=$reponame -Dsonar.sources=./ \",\r\n    \"exCludeFiles\": \"package-lock.json\"\r\n}]\r\n\r\n\r\n","import React from 'react';\r\nimport * as config from '../json/config'\r\nimport Header from '../common/Header'\r\n\r\nclass ConfigEditPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { configArr: [], backState: '', globalArr: [], projectName: this.props.projectName };\r\n        let Arr = [];\r\n        config.configData.map(ele => {\r\n            this.state.globalArr.push({ key: ele[\"projectName\"], value: ele })\r\n        })\r\n        //this.setState({ globalArr: Arr });\r\n        // console.log(this.state.globalArr);\r\n    }\r\n    componentWillReceiveProps(props) {\r\n        this.setState({ projectName: props.projectName, backState: '' });\r\n    }\r\n\r\n    handleSubmit() {\r\n        var stateCopy = Object.assign({}, this.state);\r\n        this.setState(stateCopy)\r\n    }\r\n\r\n    createRow(arr) {\r\n        return (\r\n            <tr key={arr.key}>\r\n                <td> {arr.key}</td>\r\n                {arr.key == \"projectName\" ?\r\n                    (<td><input type=\"text\" name=\"title\" value={arr.value} readOnly={true} /></td>) : (\r\n                        <td><input type=\"text\" name=\"title\" value={arr.value} onBlur={(event) => this.onBlur(arr.key, event)} /></td>\r\n                    )}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    onBlur(key, event) {\r\n        let dataToRender;\r\n        var stateCopy = Object.assign({}, this.state);\r\n        stateCopy.globalArr.map(function (ele) {\r\n            if (ele.key == stateCopy.projectName) {\r\n                //dataToRender = ele.value;\r\n                Object.keys(ele.value).forEach(element => {\r\n                    if (element == key) {\r\n                        ele.value[element] = event.target.value;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        console.log(stateCopy.globalArr);\r\n        // stateCopy.projectName = this.state.projectName;\r\n        // stateCopy.backState = '';\r\n        // this.state = stateCopy;\r\n        // console.log(this.state);\r\n        this.setState(stateCopy);\r\n    }\r\n\r\n    handleBackButton() {\r\n        var stateCopy = Object.assign({}, this.state);\r\n        stateCopy.backState = \"true\";\r\n        stateCopy.projectName = this.state.projectName;\r\n        stateCopy.configArr = this.state.configArr;\r\n        this.setState(stateCopy);\r\n\r\n        console.log(this.state);\r\n    }\r\n\r\n    render() {\r\n        //let dataToRender = this.state.globalArr[this.props.projectName].value;\r\n        let x = [];\r\n        let dataToRender;\r\n        this.state.globalArr.forEach(ele => {\r\n            if (ele.key == this.props.projectName) {\r\n                dataToRender = ele.value\r\n            }\r\n        })\r\n        Object.keys(dataToRender).forEach(element => {\r\n            x.push({ key: element, value: dataToRender[element] })\r\n        })\r\n        if (this.state.backState != \"\") {\r\n\r\n            return (\r\n                <Header projectName={this.state.projectName} backState={this.state.backState}></Header>\r\n            );\r\n        }\r\n        return (\r\n            <form>\r\n                <table>\r\n                    {x.map(this.createRow, this)}\r\n                </table>\r\n                <tr>\r\n                    <input type=\"button\" value=\"Submit\" onClick={() => this.handleSubmit(this)} />\r\n                    <input type=\"button\" value=\"Back\" onClick={() => this.handleBackButton(this)} />\r\n                </tr>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfigEditPage;\r\n","export let x = [\r\n    {\r\n        email: 'calvin.iyer@gmail.com',\r\n        alias: 'calvin.iyer@gmail.com'\r\n    },\r\n    {\r\n        email: \"t-karli@vulcan.com\",\r\n        alias: \"t-karli@vulcan.com\"\r\n    },\r\n    {\r\n        email: \"calvin-iyer@users.noreply.github.com\",\r\n        alias: \"calvin-iyer@users.noreply.github.com\"\r\n    },\r\n    {\r\n        email: \"37868878+pankajpardhi@users.noreply.github.com\",\r\n        alias: \"37868878+pankajpardhi@users.noreply.github.com\"\r\n    },\r\n    {\r\n        email: \"gaurav.sharma@talentica.com\",\r\n        alias: \"gaurav.sharma@talentica.com\"\r\n    },\r\n    {\r\n        email: \"Pankaj.Pardhi@talentica.com\",\r\n        alias: \"pankaj.pardhi@talentica.com\"\r\n    },\r\n    {\r\n        email: \"PankajP@talentica-all.com\",\r\n        alias: \"pankajp@talentica-all.com\"\r\n    },\r\n    {\r\n        email: \"sailajay@vulcan.com\",\r\n        alias: \"sailajay@vulcan.com\"\r\n    },\r\n    {\r\n        email: \"Gaurav.Sharma@talentica.com\",\r\n        alias: \"gaurav.sharma@talentica.com\"\r\n    },\r\n    {\r\n        email: \"johnch@vulcan.com\",\r\n        alias: \"johnch@vulcan.com\"\r\n    },\r\n    {\r\n        email: \"t-tylers@vulcan.com\",\r\n        alias: \"t-tylers@vulcan.com\"\r\n    },\r\n    {\r\n        email: \"tsellon@gmail.com\",\r\n        alias: \"tsellon@gmail.com\"\r\n    }\r\n];\r\n\r\n","import React from 'react';\r\nimport { x } from '../json/emailAliases';\r\nimport ReactDOM from 'react-dom';\r\nimport * as fs from 'fs';\r\n\r\nclass EmailAliasesPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(x);\r\n        this.state = { address: x, typed: '' };\r\n        // this.state={typed:''}\r\n    }\r\n    createRow1(address) {\r\n        let element;\r\n        if (address.email != \"calvin.iyer@gmail.com\") {\r\n            element = <div><td>{address.email}</td><td>{address.alias}</td></div>\r\n\r\n        }\r\n        else {\r\n            element = <td>{address.alias}</td>\r\n        }\r\n        return (\r\n            <tr key={address.email}>\r\n                {element}\r\n                <td onClick={() => this.readFile()}>Edit</td>\r\n            </tr>\r\n        );\r\n    }\r\n    readFile() {\r\n        let x = fs.readFile(\"E:\\\\abc.txt\");\r\n        console.log(x);\r\n    }\r\n    onBlur(event) {\r\n        this.setState({ address: x, typed: event.target.value })\r\n    }\r\n    createRow2(address) {\r\n\r\n        return (\r\n            <tr key={address.email}>\r\n                <td>{address.email}</td>\r\n                {address.email == \"calvin.iyer@gmail.com\" ? (\r\n                    < td > {address.alias}</td>\r\n                ) :\r\n                    <td onClick={() => this.handleClick(address.email)}>Edit</td>\r\n                }\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    createRow(address) {\r\n\r\n        return (\r\n            <tr key={address.email}>\r\n                <td> {address.email}</td>\r\n                <td><input id=\"x\" type=\"text\" name=\"title\" defaultValue={address.alias} onBlur={this.onBlur.bind(this)} /></td>\r\n                <td onClick={() => this.handleClick(address.email, this.state.typed)}>Edit</td>\r\n            </tr>\r\n        );\r\n    }\r\n    handleClick1(x) {\r\n        // let test=JSON.stringify(x);\r\n        ReactDOM.render(\r\n            <label>{x}</label>, document.getElementById(\"x\")\r\n        );\r\n    }\r\n\r\n    handleClick(email, alias) {\r\n        var stateCopy = Object.assign({}, this.state);\r\n        let arr = stateCopy.address;\r\n        stateCopy.address.map(function (y) {\r\n            if (y.email == email) {\r\n                y.alias = alias;\r\n            }\r\n        });\r\n        this.setState(stateCopy);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Email</th>\r\n                            <th>Aliases</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.address.map(this.createRow, this)}\r\n                    </tbody>\r\n                </table>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EmailAliasesPage;","export let processStatus={ \"checkEnvironment\": true, \"main\": true, \"mainGitAnalysis\": true, \"prepareConfigurationList\": true, \"mainCiceroAnalysis\": true, \"mainSonarAnalysis\": true, \"sonarAnalysis\": true, \"productivityjob\": true, \"sonarETL\": true, \"analytics\": true, \"prepareMainStatus\": true, \"combineCeicroModelsOfall\": true };\r\n","import React from 'react';\r\nimport * as  data from '../json/processStatus';\r\n\r\n\r\nclass ProcessStatusEditPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(this.state)\r\n        this.state = { statusArr: []};\r\n        Object.keys(data.processStatus).forEach(element => {\r\n            this.state.statusArr.push({ key: element, value: data.processStatus[element] })\r\n        })\r\n    }\r\n\r\n    handleSubmit() {\r\n        var stateCopy = Object.assign({}, this.state);\r\n        this.setState(stateCopy)\r\n    }\r\n\r\n    createRow(arr) {\r\n        return (\r\n            <tr key={arr.key}>\r\n                <td> {arr.key}</td>\r\n                <td><input type=\"text\" name=\"title\" defaultValue={arr.value} onBlur={(event) => this.onBlur(arr.key, event)} /></td>\r\n            </tr>\r\n        );\r\n    }\r\n    onBlur(key, event) {\r\n        console.log(event.target.value);\r\n        var stateCopy = Object.assign({}, this.state);\r\n        stateCopy.statusArr.map(function (ele) {\r\n            if (ele.key == key) {\r\n                ele.value = event.target.value;\r\n            }\r\n            console.log(stateCopy.statusArr);\r\n        })\r\n      //  stateCopy.isModified = true;\r\n       // this.state = stateCopy;\r\n       this.setState(stateCopy);\r\n        console.log(this.state);\r\n        //this.setState({ address: x, typed: event.target.value })\r\n    }\r\n    render() {\r\n        return (\r\n            <form>\r\n                <table>\r\n                    {this.state.statusArr.map(this.createRow, this)}\r\n                </table>\r\n                <tr>\r\n                    <input type=\"button\" value=\"Submit\" onClick={() => this.handleSubmit(this)} />\r\n                </tr>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProcessStatusEditPage;","import React from 'react';\r\nimport * as files1 from '../json/fileData';\r\nimport ConfigEditPage from './configEditPage';\r\nimport EmailAliasesPage from './emailAliasePage';\r\nimport ProcessStatusEditPage from './processStatusEditPage';\r\n\r\nclass ConfigurationPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { files: files1.files, projectName: props.projectName };\r\n    }\r\n\r\n    onclickHandle(files) {\r\n\r\n        this.setState({ fileName: files })\r\n    }\r\n\r\n    componentWillReceiveProps(props)\r\n    {\r\n        this.setState({projectName:props.projectName})\r\n    }\r\n\r\n    createFileRow(files) {\r\n        return (\r\n            <tr key={files.id}>\r\n                <td>{files.id}</td>\r\n                <td>{files.fileName}</td>\r\n                <td onClick={() => this.onclickHandle(files.fileName)}>Edit</td>\r\n            </tr>\r\n        );\r\n    }\r\n    render() {\r\n\r\n        if (this.state.fileName == \"config.json\")\r\n            return (\r\n                <ConfigEditPage projectName={this.props.projectName}></ConfigEditPage>\r\n            )\r\n\r\n        if (this.state.fileName == \"emailAliases.json\")\r\n            return (\r\n                <EmailAliasesPage projectName={this.state.projectName}></EmailAliasesPage>\r\n            )\r\n\r\n        if (this.state.fileName == \"processStatus.json\")\r\n            return (\r\n                <ProcessStatusEditPage projectName={this.state.projectName}></ProcessStatusEditPage>\r\n            )\r\n\r\n        return (\r\n            <div>\r\n                <h1>Configurations:</h1>\r\n\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>ID</th>\r\n                            <th>Configuration File Name</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.files.map(this.createFileRow, this)}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConfigurationPage;","import React, { PropTypes } from 'react';\r\nimport { Link, IndexLink } from 'react-router';\r\nimport ProjectDropDown from '../project/ProjectDropDown';\r\n\r\nimport ConfigurationPage from '../configuration/ConfigurationPage';\r\n\r\n\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { projectName: props.projectName }\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        this.setState({projectName:props.projectName,backState:''});\r\n    }\r\n\r\n    showConfigrationPage(){\r\n        this.setState({projectName:this.state.project})        \r\n    }\r\n\r\n    showExecutionPage(){\r\n\r\n    }\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                \r\n                <ConfigurationPage projectName={this.props.projectName}></ConfigurationPage>\r\n\r\n            </div >\r\n        );\r\n    }\r\n};\r\n\r\nexport default Header;\r\n","// This component handles the App template used on every page.\nimport React from 'react';\nimport Header from './common/Header';\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css';\nconst options = [\n  '5c', 'mist', 'vulcan'\n]\nconst defaultOption = options[0]\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { projectName: defaultOption }\n  }\n\n  handleProjectChange(event) {\n    this.setState({ projectName:event.value});\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <h1><b>Talentica</b></h1>\n        <div className=\"jumbotron\">\n          <h6>Select Project:</h6>\n          <Dropdown options={options} value={defaultOption} placeholder=\"Select an option\" onChange={(e) => this.handleProjectChange(e)} />\n        </div>\n        <Header projectName={this.state.projectName}></Header>\n      </div>\n    );\n  }\n}\n\n// App.propTypes = {\n//   children: PropTypes.object.isRequired,\n// };\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\nimport * as serviceWorker from './serviceWorker';\nimport routes from './routes';\nimport { Router, browserHistory } from 'react-router';\nimport './bootstrap.min.css';\n\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}